{"version":3,"sources":["features/Workout/Workout.module.css","features/RoutinesHistory/RoutineHistory.module.css","features/History/History.module.css","features/ExerciseHistory/ExerciseHistory.module.css","features/Routines/Routines.module.css","features/Routines/Edit.module.css","features/Exercises/Exercises.module.css","features/Header/Header.module.css","features/Exercises/Edit.module.css","features/WorkoutHistory/Edit.module.css","features/WorkoutHistory/WorkoutHistory.module.css","features/Login/Register.module.css","features/Account/Account.module.css","features/LandingPage/LandingPage.module.css","features/Login/Login.module.css","features/HowToUse/HowToUse.module.css","features/Login/LoginSlice.js","features/Header/Header.js","features/Exercises/ExercisesSlice.js","features/Exercises/Edit.js","features/Exercises/Exercises.js","utils/helpers.js","features/ExerciseHistory/ExerciseHistory.js","features/Routines/RoutinesSlice.js","features/Routines/Edit.js","features/Routines/Routines.js","features/RoutinesHistory/RoutineHistory.js","features/History/History.js","features/Workout/WorkoutSlice.js","features/Workout/Workout.js","features/WorkoutHistory/Edit.js","features/WorkoutHistory/WorkoutHistory.js","features/Login/Login.js","features/Login/Register.js","features/Account/Account.js","features/HowToUse/HowToUse.js","_images/workingOut.jpg","features/LandingPage/LandingPage.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","LoginSlice","createSlice","name","initialState","loggedIn","reducers","logIn","state","logOut","actions","Header","useSelector","login","dispatch","useDispatch","useState","menuOpen","setMenuOpen","handleLogoutClick","fetch","closeMenu","className","styles","mainNav","to","id","logo","onClick","viewBox","width","height","data-testid","y","mobileNav","mobileNavInner","linksContainer","exercisesSlice","exercisesList","activeExercise","editExerciseShow","getExercisesList","action","payload","changeActiveExercise","toggleEditExercisesShow","Edit","props","showModal","exercises","newExerciseName","setNewExerciseName","baseUrl","handleDoneClick","a","fetchUrl","exerciseToEdit","fetchOptions","method","body","JSON","stringify","headers","json","jsonExercisesList","handleDeleteClick","modal","elementsBackground","type","placeholder","onChange","event","target","value","buttonsContainer","editButton","deleteButton","Exercises","setExerciseToEdit","createNew","onSubmit","then","res","jsonRes","preventDefault","htmlFor","submitButton","map","exercise","individualExercises","historyButton","dateConverter","routineDate","year","slice","day","month","charAt","ExerciseHistory","numberOfHistoryRows","setNumberOfHistoryRows","exerciseHistory","setExerciseHistory","useEffect","exerciseHistoryResults","jsonExerciseHistoryResults","fetchExerciseHistory","exerciseHistoryTitle","description","length","historyItem","date","timeAndNegative","time_under_load","negatives","spanPadding","previous","routinesSlice","routinesList","routinesExercisesList","activeRoutine","editRoutineShow","getRoutinesList","getRoutinesExercisesList","changeActiveRoutine","toggleEditRoutinesShow","routines","exercisesRoutines","newRoutineName","setNewRoutineName","selectedExerciseID","setSelectedExerciseID","routineToEdit","RoutinesList","jsonRoutinesList","removeExercise","exerciseID","jsonRoutinesExercisesList","addExercise","filter","routine_id","individualExContainer","dropDown","Routines","setRoutineToEdit","routine","routineContainer","individualRoutines","routineID","RoutineHistory","routineHistory","setRoutineHistory","datesHistory","setDatesHistory","routineHistoryResults","jsonRoutineHistoryResults","fetchRoutineHistory","forEach","oldHistory","dates","Set","routineHistoryTitle","historyDate","workoutDate","Math","random","indexOf","History","datesNamesHistory","setDatesNamesHistory","filteredRoutineDatesNames","index","includes","dateName","historyContainer","historyName","workoutSlice","workoutExercises","totalTime","totalTimerActive","showEditWorkout","getWorkoutExercises","changeTUL","timeUnderLoad","exerciseName","indexOfExercise","findIndex","addNegatives","parseInt","changeNegatives","startTotalTime","stopTotalTime","resetTotalTime","updateTotalTime","toggleShowEditWorkout","Workout","workout","totalWorkTime","exerciseIndex","setExerciseIndex","selectedExercise","setSelectedExercise","setNegatives","setTimeUnderLoad","timerActive","setTimerActive","timer","setInterval","clearInterval","totalTimer","workoutHistory","timerContainer","workoutTitle","newRoutine","exerciseSelector","startSetLight","startSetDark","values","cancelbutton","WorkoutHistory","messageAlert","setMessageAlert","workoutExercisesResults","jsonworkoutExercisesResults","exercisesWithStats","exercises_routines_id","fetchWorkoutExercises","exerciseStatsContainer","handleEditClick","completeButton","workoutDetails","totalWorkoutTime","status","alert","Login","username","setUsername","password","setPassword","history","useHistory","loginContainer","push","required","e","Register","passwordConfirm","setPasswordConfirm","setAlert","registerContainer","Account","newEmail","setNewEmail","emailConfirm","setEmailConfirm","oldPassword","setOldPassword","newPassword","setNewPassword","alertMessage","setAlertMessage","accountContainer","formsContainer","HowToUse","howToUseContainer","LandingPage","landingPageContainer","mainImage","src","background","alt","textContainer","App","jsonRoutines","getRoutines","jsonExercisesRoutines","getExercisesRoutines","jsonExercises","getExercises","exact","path","configureStore","reducer","exercisesReducer","routinesReducer","workoutReducer","loginReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.352189ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"workoutHistory\":\"Workout_workoutHistory__12pqP\",\"workoutTitle\":\"Workout_workoutTitle__1evyA\",\"description\":\"Workout_description__1xt-3\",\"timerContainer\":\"Workout_timerContainer__5PA53\",\"timeUnderLoad\":\"Workout_timeUnderLoad__2vTqz\",\"exerciseSelector\":\"Workout_exerciseSelector___8YZn\",\"buttonsContainer\":\"Workout_buttonsContainer__3Bqqk\",\"negatives\":\"Workout_negatives__3fdzT\",\"startSetDark\":\"Workout_startSetDark__2eJG4\",\"startSetLight\":\"Workout_startSetLight__3Ujc-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routineHistory\":\"RoutineHistory_routineHistory__34qi9\",\"routineHistoryTitle\":\"RoutineHistory_routineHistoryTitle__-70h8\",\"description\":\"RoutineHistory_description__1aYEn\",\"historyDate\":\"RoutineHistory_historyDate__khpBB\",\"historyItem\":\"RoutineHistory_historyItem__1--SS\",\"exercise\":\"RoutineHistory_exercise__2eM0A\",\"timeAndNegative\":\"RoutineHistory_timeAndNegative__3Wi10\",\"exerciseStats\":\"RoutineHistory_exerciseStats__26d7w\",\"spanPadding\":\"RoutineHistory_spanPadding__1RzJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routineHistory\":\"History_routineHistory__1XyGL\",\"routineHistoryTitle\":\"History_routineHistoryTitle__1JOlx\",\"historyContainer\":\"History_historyContainer__2n0_Y\",\"description\":\"History_description__3MayS\",\"historyName\":\"History_historyName__3EXtj\",\"historyDate\":\"History_historyDate__2buog\",\"historyItem\":\"History_historyItem__6xBhi\",\"exercise\":\"History_exercise__AXTbH\",\"timeAndNegative\":\"History_timeAndNegative__oAAPh\",\"exerciseStats\":\"History_exerciseStats__3nPGM\",\"spanPadding\":\"History_spanPadding__1zguH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exerciseHistory\":\"ExerciseHistory_exerciseHistory__2ZE5P\",\"exerciseHistoryTitle\":\"ExerciseHistory_exerciseHistoryTitle__1uI9j\",\"description\":\"ExerciseHistory_description__1u1rv\",\"historyItem\":\"ExerciseHistory_historyItem__3VQVE\",\"date\":\"ExerciseHistory_date__2RLrO\",\"timeAndNegative\":\"ExerciseHistory_timeAndNegative__2ybM7\",\"exerciseStats\":\"ExerciseHistory_exerciseStats__33f-z\",\"spanPadding\":\"ExerciseHistory_spanPadding__2zcKa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"routineContainer\":\"Routines_routineContainer__3F3e4\",\"routines\":\"Routines_routines__1LW0r\",\"individualExercises\":\"Routines_individualExercises__Zpkzf\",\"createNew\":\"Routines_createNew__3BOR6\",\"submitButton\":\"Routines_submitButton__2AZE0\",\"individualRoutines\":\"Routines_individualRoutines__erKcy\",\"historyButton\":\"Routines_historyButton__2fiZz\",\"editButton\":\"Routines_editButton__1Puwu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Edit_modal__24QKR\",\"individualExContainer\":\"Edit_individualExContainer__12opM\",\"individualExercises\":\"Edit_individualExercises__18ZKT\",\"elementsBackground\":\"Edit_elementsBackground__1DkGB\",\"buttonsContainer\":\"Edit_buttonsContainer__3jb2R\",\"editButton\":\"Edit_editButton__1-q3V\",\"deleteButton\":\"Edit_deleteButton__1Nh7B\",\"dropDown\":\"Edit_dropDown__1bIE4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exercises\":\"Exercises_exercises__2IGgV\",\"createNew\":\"Exercises_createNew__3O7mA\",\"submitButton\":\"Exercises_submitButton__370c9\",\"individualExercises\":\"Exercises_individualExercises__3tGjK\",\"historyButton\":\"Exercises_historyButton__2jkmj\",\"editButton\":\"Exercises_editButton__2EHyL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__30C5C\",\"mainNav\":\"Header_mainNav__1l5y7\",\"mobileNav\":\"Header_mobileNav__39lmy\",\"mobileNavInner\":\"Header_mobileNavInner__3DSp-\",\"linksContainer\":\"Header_linksContainer__Lwc6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Edit_modal__1KT37\",\"elementsBackground\":\"Edit_elementsBackground__1-sYv\",\"buttonsContainer\":\"Edit_buttonsContainer__3eIs1\",\"editButton\":\"Edit_editButton__1WBeO\",\"deleteButton\":\"Edit_deleteButton__13QvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Edit_modal__KyMPk\",\"elementsBackground\":\"Edit_elementsBackground__DMt4E\",\"buttonsContainer\":\"Edit_buttonsContainer__2NgNd\",\"editButton\":\"Edit_editButton__3pny5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"workoutHistory\":\"WorkoutHistory_workoutHistory__1CTIX\",\"exerciseStatsContainer\":\"WorkoutHistory_exerciseStatsContainer__1k3w0\",\"spanPadding\":\"WorkoutHistory_spanPadding__2SuKm\",\"completeButton\":\"WorkoutHistory_completeButton__TGMwD\",\"alert\":\"WorkoutHistory_alert__1WkJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerContainer\":\"Register_registerContainer__1amui\",\"submitButton\":\"Register_submitButton__2rvjf\",\"alert\":\"Register_alert__3LCNn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accountContainer\":\"Account_accountContainer__t-kB3\",\"formsContainer\":\"Account_formsContainer__1ZxFN\",\"alert\":\"Account_alert__3R8_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"landingPageContainer\":\"LandingPage_landingPageContainer__13VZF\",\"mainImage\":\"LandingPage_mainImage__1I8RK\",\"textContainer\":\"LandingPage_textContainer__3ytXM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__1Df2A\",\"submitButton\":\"Login_submitButton__2VuAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"howToUseContainer\":\"HowToUse_howToUseContainer__JW4pH\"};","import { createSlice } from '@reduxjs/toolkit';\n\nexport const LoginSlice = createSlice({\n    name: \"login\",\n    initialState: {\n        loggedIn: false\n    },\n    reducers: {\n        logIn: (state) => {\n            state.loggedIn = true;\n        },\n        logOut: (state) => {\n            state.loggedIn = false;\n        }\n    }\n});\n\nexport const { logIn, logOut } = LoginSlice.actions;\nexport default LoginSlice.reducer;","import styles from './Header.module.css';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nimport { logOut } from '../Login/LoginSlice';\n\n\nexport const Header = () => {\n    const loggedIn = useSelector(state => state.login.loggedIn);\n    const dispatch = useDispatch();\n\n    const [menuOpen, setMenuOpen] = useState(false);\n\n\n    //log out and redirect to login page\n    const handleLogoutClick = () => {\n        fetch('api/account/logout');\n        dispatch(logOut());\n        setMenuOpen(false);\n    }\n\n\n    const closeMenu = () => {\n        setMenuOpen(false);\n    }\n\n\n    return (\n        <header>\n            <nav className={styles.mainNav}>\n                <Link to=\"/\"><h1 id={styles.logo}>HIT <span>WORKOUT</span></h1></Link>\n\n                {/* If not logged in, don't display the main menu */}\n                {!loggedIn ? null :\n                    <ul>\n                        <li><Link to=\"/workout\">Work out</Link></li>\n                        <li><Link to=\"/history\">History</Link></li>\n                        <li><Link to=\"/exercises\">Exercises</Link></li>\n                        <li><Link to=\"/routines\">Routines</Link></li>\n                        <li><Link to=\"/howtouse\">How to use</Link></li>\n                    </ul>\n                }\n                <ul>\n                    {\n                        !loggedIn ? <li><Link to=\"/login\">Login</Link></li> :\n                            <li><Link to=\"/login\" onClick={handleLogoutClick}>Log out</Link></li>\n                    }\n                    <li><Link to=\"/account\">Account</Link></li>\n                </ul>\n                \n                {/* Hamburger menu icon */}\n                <svg\n                    viewBox=\"0 0 100 80\"\n                    width=\"40\"\n                    height=\"40\"\n                    data-testid=\"openMenuButton\"\n                    onClick={() => setMenuOpen(true)}\n                >\n                    <rect width=\"100\" height=\"10\"></rect>\n                    <rect y=\"30\" width=\"100\" height=\"10\"></rect>\n                    <rect y=\"60\" width=\"100\" height=\"10\"></rect>\n                </svg>\n            </nav>\n\n\n\n            {/* Mobile nav, only displayed for smaller devices */}\n            {   !menuOpen ? null :\n                <nav className={styles.mobileNav}>\n                    <div className={styles.mobileNavInner}>\n                        <button onClick={() => setMenuOpen(false)}>X</button>\n\n                        <div className={styles.linksContainer}>\n                            {/* If not logged in, don't display the main menu */}\n                            {!loggedIn ? null :\n                                <ul>\n                                    <li><Link to=\"/workout\" onClick={closeMenu}>Work out</Link></li>\n                                    <li><Link to=\"/history\" onClick={closeMenu}>History</Link></li>\n                                    <li><Link to=\"/exercises\" onClick={closeMenu}>Exercises</Link></li>\n                                    <li><Link to=\"/routines\" onClick={closeMenu}>Routines</Link></li>\n                                    <li><Link to=\"/howtouse\" onClick={closeMenu}>How to use</Link></li>\n                                </ul>\n                            }\n                            <ul>\n                                {\n                                    !loggedIn ? <li><Link to=\"/login\" onClick={closeMenu}>Login</Link></li> :\n                                        <li><Link to=\"/login\" onClick={handleLogoutClick}>Log out</Link></li>\n                                }\n                                <li><Link to=\"/account\" onClick={closeMenu}>Account</Link></li>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n            }\n        </header>\n    );\n}","import { createSlice } from '@reduxjs/toolkit';\n\n\n\nexport const exercisesSlice = createSlice({\n  name: 'exercises',\n  initialState: {\n    exercisesList: [],\n    activeExercise: { name: \"No exercise available\", id: 0 },\n    editExerciseShow: false,\n  },\n  reducers: {\n    getExercisesList: (state, action) => {\n      state.exercisesList = action.payload\n    },\n    changeActiveExercise: (state, action) => {\n      state.activeExercise = action.payload;\n    },\n    toggleEditExercisesShow: (state, action) => {\n      state.editExerciseShow = !state.editExerciseShow;\n    }\n  }\n});\n\n\nexport const { getExercisesList, changeActiveExercise, toggleEditExercisesShow } = exercisesSlice.actions;\nexport default exercisesSlice.reducer;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Edit.module.css';\n\nimport { getExercisesList, toggleEditExercisesShow } from './ExercisesSlice';\n\nexport const Edit = props => {\n    const dispatch = useDispatch();\n    const showModal = useSelector(state => state.exercises.editExerciseShow);\n    const [newExerciseName, setNewExerciseName] = useState(\"\");\n\n    const baseUrl = \"api/exercises/\";\n\n    if (!showModal) {\n        return null;\n    }\n\n\n    //send a request to edit in database and close modal\n    const handleDoneClick = async () => {\n        const fetchUrl = baseUrl + props.exerciseToEdit.id;\n\n        const fetchOptions = {\n            method: 'PUT',\n            body: JSON.stringify({ \"newName\": newExerciseName }),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        if (newExerciseName !== \"\") {\n            const exercisesList = await fetch(fetchUrl, fetchOptions);\n            const jsonExercisesList = await exercisesList.json();\n            dispatch(getExercisesList(jsonExercisesList));\n        }\n\n        dispatch(toggleEditExercisesShow());\n    };\n\n\n    //send a request to delete from database and close modal\n    const handleDeleteClick = async () => {\n        const fetchUrl = baseUrl + props.exerciseToEdit.id;\n\n        const fetchOptions = {\n            method: 'DELETE',\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        const exercisesList = await fetch(fetchUrl, fetchOptions);\n        const jsonExercisesList = await exercisesList.json();\n        dispatch(getExercisesList(jsonExercisesList));\n\n\n        dispatch(toggleEditExercisesShow());\n    }\n\n\n    //update new exercise name as you type\n    const handleNameChange = (event) => {\n        setNewExerciseName(event.target.value);\n    }\n\n    return (\n        <div className={styles.modal}>\n            <div className={styles.elementsBackground}>\n                <h2>{props.exerciseToEdit.name}:</h2> <br />\n                <input type=\"text\" placeholder=\"enter new name\" onChange={handleNameChange} />\n                <div className={styles.buttonsContainer}>\n                    <button className={styles.editButton} onClick={handleDoneClick}>Done</button>\n                    <button className={styles.deleteButton} onClick={handleDeleteClick}>Delete exercise</button>\n                </div>\n            </div>\n        </div>\n    );\n}","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Exercises.module.css';\n\nimport { getExercisesList, changeActiveExercise, toggleEditExercisesShow } from './ExercisesSlice';\n\nimport { Edit } from './Edit';\n\n\nexport const Exercises = () => {\n    const dispatch = useDispatch();\n\n    const exercises = useSelector(state => state.exercises.exercisesList);\n    const [newExerciseName, setNewExerciseName] = useState(\"\");\n    const [exerciseToEdit, setExerciseToEdit] = useState(null);\n\n\n    //change new exercise name when typing\n    const handleChange = (event) => {\n        setNewExerciseName(event.target.value);\n    }\n\n\n    //add exercise to database when pressing \"Create new ex.\"\n    const handleSubmit = (event) => {\n        fetch(\"api/exercises\", {\n            method: 'POST',\n            body: JSON.stringify({ \"name\": newExerciseName }),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        }).then(res => res.json())\n          .then(jsonRes => dispatch(getExercisesList(jsonRes)));\n\n        event.preventDefault();\n        setNewExerciseName(\"\");\n    }\n\n\n    //change active exercise to show its history\n    const handleClick = (newExercise) => {\n        dispatch(changeActiveExercise(newExercise));\n    }\n\n\n    //display or hide the modal with the right exercise\n    const handleEditClick = (exerciseForEdit) => {\n        setExerciseToEdit(exerciseForEdit);\n        dispatch(toggleEditExercisesShow());\n    }\n\n\n    return (\n        <section className={styles.exercises}>\n            <div className={styles.createNew}>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"newExercise\">New exercise name:</label>\n                    <br />\n                    <input type=\"text\" value={newExerciseName} onChange={handleChange} id=\"newExercise\" />\n                    <br />\n                    <input type=\"submit\" value=\"Create new exercise\" className={styles.submitButton} />\n                </form>\n            </div>\n\n\n\n            {   /* Map exercises from global state for display */\n                exercises.map(exercise => (\n                    <div key={exercise.id}>\n                        <div className={styles.individualExercises}>\n                            <h2>{exercise.name}</h2>\n                            <div>\n                                <button className={styles.historyButton}\n                                    onClick={() => handleClick(exercise)}>History</button>\n                                <button className={styles.editButton} onClick={() => handleEditClick(exercise)}>Edit</button>\n                            </div>\n                        </div>\n                    </div>\n                ))\n            }\n\n\n            {/* Edid component as modal, with the ID of the exercise\n                that needs to be edited/deleted in the database */}\n            <Edit exerciseToEdit={exerciseToEdit} />\n\n        </section>\n    );\n}","//convert date from database string to a better display format\nexport const dateConverter = (routineDate) => {\n    const monthsArray = [null, \"January\", \"February\", \"March\", \"April\",\n        \"May\", \"June\", \"July\", \"August\", \"September\", \"November\", \"December\"];\n\n    const year = routineDate.slice(0, 4);\n    const day = routineDate.slice(8, 10);\n\n    let month = routineDate.slice(5, 7);\n    if (month.charAt(0) === \"0\") month = month.charAt(1);\n    month = monthsArray[month];\n\n    return `${day} ${month} ${year}`;\n}","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styles from './ExerciseHistory.module.css';\n\nimport { dateConverter } from '../../utils/helpers';\n\n\nexport const ExerciseHistory = () => {\n    const activeExercise = useSelector(state => state.exercises.activeExercise);\n    const [numberOfHistoryRows, setNumberOfHistoryRows] = useState(10);\n    const [exerciseHistory, setExerciseHistory] = useState([]);\n\n\n    //get the history of the exercise when component is mounted\n    useEffect(() => {\n        const fetchExerciseHistory = async () => {\n            const baseUrl = \"api/exercises/\";\n            const fetchUrl = baseUrl + activeExercise.id + `/${numberOfHistoryRows}`;\n\n            const exerciseHistoryResults = await fetch(fetchUrl);\n            const jsonExerciseHistoryResults = await exerciseHistoryResults.json();\n\n            setExerciseHistory(jsonExerciseHistoryResults);\n        };\n\n        fetchExerciseHistory();\n\n    }, [activeExercise, numberOfHistoryRows]);\n\n\n    //Load more history items when pressing \"Load more\"\n    const loadMoreHistory = () => {\n        setNumberOfHistoryRows(previous => previous + 10);\n    }\n\n\n    return (\n        <section className={styles.exerciseHistory}>\n\n            {/* Display the activateExercise from global state into the section heading */}\n            <h2 className={styles.exerciseHistoryTitle}>{activeExercise.name}</h2>\n            <p className={styles.description}>Click exercise history to see past entries</p>\n            <p>{exerciseHistory.length === 0 ? \"No history available.\" : null}</p>\n\n            {/* Take the exerciseHistory from local state and map it for display*/}\n            <div>\n                {\n                    exerciseHistory.map(historyItem => (\n                        <div className={styles.historyItem} key={historyItem.date}>\n                            <p className={styles.date}>{dateConverter(historyItem.date)}</p>\n                            <p className={styles.timeAndNegative}>Time under load: <span>{historyItem.time_under_load}s</span></p>\n                            <p className={styles.timeAndNegative}>Negatives: <span>\n                                {/* add space when negatives < 10 for display purposes */}\n                                {historyItem.negatives < 10 ? <span className={styles.spanPadding}></span> : null}\n                                {historyItem.negatives}</span>\n                            </p>\n                        </div>\n                    ))\n                }\n            </div>\n            {exerciseHistory.length > 10 ? <button onClick={loadMoreHistory}>Load more history</button> : null}\n        </section>\n    );\n}","import { createSlice } from '@reduxjs/toolkit';\n\n\n\nexport const routinesSlice = createSlice({\n  name: 'routines',\n  initialState: {\n    routinesList: [],\n    routinesExercisesList: [],\n    activeRoutine: { name: \"No routine available\", id: 0 },\n    editRoutineShow: false,\n  },\n  reducers: {\n    getRoutinesList: (state, action) => {\n      state.routinesList = action.payload;\n    },\n    getRoutinesExercisesList: (state, action) => {\n      state.routinesExercisesList = action.payload;\n    },\n    changeActiveRoutine: (state, action) => {\n      state.activeRoutine = action.payload;\n    },\n    toggleEditRoutinesShow: (state, action) => {\n      state.editRoutineShow = !state.editRoutineShow;\n    }\n  }\n});\n\nexport const { getRoutinesList, getRoutinesExercisesList, changeActiveRoutine, toggleEditRoutinesShow } = routinesSlice.actions;\nexport default routinesSlice.reducer;\n","//modal that gets displayed when clicking \"Edit\" button and gets passed an id prop for an Routine\n//this modal can make a PUT request to edit an existing Routine\n//or a DELETE request to delete an Routine\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Edit.module.css';\n\nimport { getRoutinesList, getRoutinesExercisesList, toggleEditRoutinesShow } from './RoutinesSlice';\n\nexport const Edit = props => {\n    const dispatch = useDispatch();\n\n    const showModal = useSelector(state => state.routines.editRoutineShow);\n    const exercisesRoutines = useSelector(state => state.routines.routinesExercisesList);\n    const exercises = useSelector(state => state.exercises.exercisesList);\n\n    const [newRoutineName, setNewRoutineName] = useState(\"\");\n    const [selectedExerciseID, setSelectedExerciseID] = useState(null);\n\n    const baseUrl = \"api/routines/\";\n\n\n    //update state when exercises are loaded in the app\n    useEffect(() => {\n        if (exercises.length > 0) {\n            setSelectedExerciseID(exercises[0].id);\n        }\n    }, [exercises]);\n\n\n    //only show this component when the edit button was pressed\n    if (!showModal) {\n        return null;\n    }\n\n\n    //send a request to edit in database and close modal\n    const handleDoneClick = async () => {\n        const fetchUrl = baseUrl + props.routineToEdit.id;\n\n        const fetchOptions = {\n            method: 'PUT',\n            body: JSON.stringify({ \"newName\": newRoutineName }),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        if (newRoutineName !== \"\") {\n            const RoutinesList = await fetch(fetchUrl, fetchOptions);\n            const jsonRoutinesList = await RoutinesList.json();\n            dispatch(getRoutinesList(jsonRoutinesList));\n        }\n\n        dispatch(toggleEditRoutinesShow());\n    };\n\n\n    //send a request to delete routine from database and close modal\n    const handleDeleteClick = async () => {\n        const fetchUrl = baseUrl + props.routineToEdit.id;\n\n        const fetchOptions = {\n            method: 'DELETE',\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        const RoutinesList = await fetch(fetchUrl, fetchOptions);\n        const jsonRoutinesList = await RoutinesList.json();\n        dispatch(getRoutinesList(jsonRoutinesList));\n\n\n        dispatch(toggleEditRoutinesShow());\n    }\n\n\n    //update new Routine name as you type\n    const handleNameChange = (event) => {\n        setNewRoutineName(event.target.value);\n    }\n\n\n    //display exercises for current routine to be edited\n    const displayExercises = () => {\n        return exercisesRoutines.filter(exercise => exercise.routine_id === props.routineToEdit.id);\n    }\n\n\n    //remove exercise from this routine\n    const removeExercise = async (exerciseID) => {\n        const fetchUrl = baseUrl + props.routineToEdit.id + \"/\" + exerciseID;\n\n        const fetchOptions = {\n            method: 'DELETE',\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        const routinesExercisesList = await fetch(fetchUrl, fetchOptions);\n        const jsonRoutinesExercisesList = await routinesExercisesList.json();\n        dispatch(getRoutinesExercisesList(jsonRoutinesExercisesList));\n    }\n\n\n    //add exercise to this routine\n    const addExercise = async (exerciseID) => {\n        const fetchUrl = baseUrl + props.routineToEdit.id + \"/\" + exerciseID;\n\n        const fetchOptions = {\n            method: 'POST',\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        //only try to add an exercise if it exists\n        if (selectedExerciseID) {\n            const routinesExercisesList = await fetch(fetchUrl, fetchOptions);\n            const jsonRoutinesExercisesList = await routinesExercisesList.json();\n            dispatch(getRoutinesExercisesList(jsonRoutinesExercisesList));\n        }\n    }\n\n\n    return (\n        <div className={styles.modal}>\n            <div className={styles.elementsBackground}>\n                <h2>{props.routineToEdit.name}:</h2> <br />\n                <input type=\"text\" placeholder=\"enter new name for this routine\" onChange={handleNameChange} />\n\n\n\n                {/* For current routine, display the corresponding exercises. */}\n                {\n                    displayExercises().map(exercise => (\n                        <div key={exercise.id + exercise.routine_id} className={styles.individualExContainer}>\n                            <p className={styles.individualExercises}>{exercise.name}</p>\n                            <button onClick={() => removeExercise(exercise.id)}>Remove</button>\n                        </div>\n                    ))\n                }\n\n                <div className={styles.dropDown}>\n                    {/* Drop-down with all the exercises this user has created */}\n                    <select>\n                        {exercises.map(exercise => (\n                            <option value={exercise.name}\n                                key={exercise.id + 'dropDown'}\n                                onClick={() => setSelectedExerciseID(exercise.id)}>{exercise.name}</option>\n                        ))}\n                    </select>\n                    <button onClick={() => addExercise(selectedExerciseID)}>Add Exercise</button>\n                </div>\n\n                <div className={styles.buttonsContainer}>\n                    <button className={styles.editButton} onClick={handleDoneClick}>Done</button>\n                    <button className={styles.deleteButton} onClick={handleDeleteClick}>Delete routine</button>\n                </div>\n\n\n            </div>\n        </div>\n    );\n}","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Routines.module.css';\n\nimport { getRoutinesList, changeActiveRoutine, toggleEditRoutinesShow } from './RoutinesSlice';\n\nimport { Edit } from './Edit';\n\n\n\n\nexport const Routines = () => {\n    const dispatch = useDispatch();\n\n    const routines = useSelector(state => state.routines.routinesList);\n    const exercisesRoutines = useSelector(state => state.routines.routinesExercisesList);\n\n    const [newRoutineName, setNewRoutineName] = useState(\"\");\n    const [routineToEdit, setRoutineToEdit] = useState({ name: 'Default', id: 1 });\n\n\n    //change new Routine name when typing\n    const handleChange = (event) => {\n        setNewRoutineName(event.target.value);\n    }\n\n\n    //add Routine to database when pressing \"Create new routine\"\n    const handleSubmit = (event) => {\n        fetch(\"api/routines\", {\n            method: 'POST',\n            body: JSON.stringify({ \"name\": newRoutineName }),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        })\n            .then(res => res.json())\n            .then(jsonRes => dispatch(getRoutinesList(jsonRes)));\n\n        event.preventDefault();\n        setNewRoutineName(\"\");\n    }\n\n\n    //change active Routine to show its history\n    const handleClick = (newRoutine) => {\n        dispatch(changeActiveRoutine(newRoutine));\n    }\n\n\n    //display or hide the modal with the right Routine\n    const handleEditClick = (routineForEdit) => {\n        setRoutineToEdit(routineForEdit);\n        dispatch(toggleEditRoutinesShow());\n    }\n\n\n    //display exercises for each routine\n    const displayExercises = (routineID) => {\n        return exercisesRoutines.filter(exercise => exercise.routine_id === routineID);\n    }\n\n\n    return (\n        <section className={styles.routines}>\n            <div className={styles.createNew}>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"newRoutine\">New routine name:</label>\n                    <br />\n                    <input type=\"text\" value={newRoutineName} onChange={handleChange} id=\"newRoutine\" />\n                    <br />\n                    <input type=\"submit\" value=\"Create new routine\" className={styles.submitButton} />\n                </form>\n            </div>\n\n\n\n            {   /* Map Routines from global state for display */\n                routines.map(routine => (\n                    <div key={routine.id} className={styles.routineContainer}>\n                        <div className={styles.individualRoutines}>\n                            <h2>{routine.name}</h2>\n                            <div>\n                                <button className={styles.historyButton}\n                                    onClick={() => handleClick(routine)}>History</button>\n                                <button className={styles.editButton} onClick={() => handleEditClick(routine)}>Edit</button>\n                            </div>\n                        </div>\n\n                        {/* For each routine, display the corresponding exercises.\n                            Filter by routine ID */}\n                        {displayExercises(routine.id).map(exercise => (\n                            <p key={exercise.id} className={styles.individualExercises}>{exercise.name}</p>\n                        ))}\n                    </div>\n                ))\n            }\n\n\n            {/* Edid component as modal, with the ID of the Routine\n                that needs to be edited/deleted in the database */}\n            <Edit routineToEdit={routineToEdit} />\n\n        </section>\n    );\n}","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styles from './RoutineHistory.module.css';\n\nimport { dateConverter } from '../../utils/helpers';\n\n\nexport const RoutineHistory = () => {\n    const activeRoutine = useSelector(state => state.routines.activeRoutine);\n\n    const [numberOfHistoryRows, setNumberOfHistoryRows] = useState(10);\n    const [routineHistory, setRoutineHistory] = useState([]);\n    const [datesHistory, setDatesHistory] = useState([]);\n\n\n    //get the history of the Routine when component is mounted\n    useEffect(() => {\n        const fetchRoutineHistory = async () => {\n            const baseUrl = \"api/routines/\";\n            const fetchUrl = baseUrl + activeRoutine.id + `/${numberOfHistoryRows}`;\n\n            const routineHistoryResults = await fetch(fetchUrl);\n            const jsonRoutineHistoryResults = await routineHistoryResults.json();\n\n            setRoutineHistory(jsonRoutineHistoryResults);\n        };\n\n        fetchRoutineHistory();\n    }, [activeRoutine, numberOfHistoryRows]);\n\n\n    //extract the workout dates into a separate array for sorting\n    useEffect(() => {\n        setDatesHistory([]);\n        routineHistory.forEach(routine => {\n            if (routine.name === activeRoutine.name) {\n                setDatesHistory(oldHistory => [...oldHistory, routine.date]);\n            }\n        });\n\n        //remove duplicates from dates array\n        setDatesHistory(dates => [...new Set(dates)]);\n    }, [routineHistory, activeRoutine]);\n\n\n    //Load more history items when pressing \"Load more\"\n    const loadMoreHistory = () => {\n        setNumberOfHistoryRows(previous => previous + 10);\n    }\n\n\n    //filter history exercises by date\n    const displayRoutineExercises = (workoutDate) => {\n        return routineHistory.filter(exercise => exercise.date === workoutDate);\n    }\n\n\n    return (\n        <section className={styles.routineHistory}>\n\n            {/* Display the activateRoutine from global state into the section heading */}\n            <h2 className={styles.routineHistoryTitle}>{activeRoutine.name}</h2>\n            <p className={styles.description}>Click routine history to see past entries</p>\n            <p>{datesHistory.length === 0 ? \"No history available.\" : null}</p>\n\n            {\n                datesHistory.map(date => (\n                    /* Take the RoutineHistory from local state and map it for display*/\n                    <div key={datesHistory.indexOf(date)}>\n                        <h2 className={styles.historyDate}>{dateConverter(date)}</h2>\n                        {\n                            //Filter exercises buy date and display\n                            displayRoutineExercises(date).map(historyItem => (\n                                <div className={styles.historyItem} key={historyItem.date + historyItem.exercise + Math.random()}>\n                                    <p className={styles.exercise}>{historyItem.exercise}</p>\n                                    <p className={styles.timeAndNegative}>Time under load: <span>\n                                        {historyItem.time_under_load}s</span>\n                                    </p>\n\n                                    <p className={styles.timeAndNegative}>Negatives: <span>\n                                        {/* add space when negatives < 10 for display purposes */}\n                                        {historyItem.negatives < 10 ? <span className={styles.spanPadding}></span> : null}\n                                        {historyItem.negatives}</span>\n                                    </p>\n                                </div>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n            {datesHistory.length > 10 ? <button onClick={loadMoreHistory}>Load more history</button> : null}\n        </section >\n    );\n}","import { useEffect, useState } from 'react';\nimport styles from './History.module.css';\n\nimport { dateConverter } from '../../utils/helpers';\n\n\nexport const History = () => {\n    const [numberOfHistoryRows, setNumberOfHistoryRows] = useState(50);\n    const [routineHistory, setRoutineHistory] = useState([]);\n    const [datesNamesHistory, setDatesNamesHistory] = useState([]);\n\n\n    //get the history when component is mounted\n    useEffect(() => {\n        const fetchRoutineHistory = async () => {\n            const baseUrl = \"api/routines/\";\n\n            const fetchUrl = baseUrl + \"history/\" + numberOfHistoryRows;\n\n            const routineHistoryResults = await fetch(fetchUrl);\n            const jsonRoutineHistoryResults = await routineHistoryResults.json();\n\n            setRoutineHistory(jsonRoutineHistoryResults);\n        };\n\n        fetchRoutineHistory();\n    }, [numberOfHistoryRows]);\n\n\n    //extract the workout dates and names into a separate array for sorting/grouping\n    useEffect(() => {\n\n        //make a list of all dates\n        let dates = routineHistory.map(routine => routine.date);\n\n        //filter out duplicates\n        let filteredRoutineDatesNames = routineHistory.filter(({ date }, index) => !dates.includes(date, index + 1))\n\n        setDatesNamesHistory(filteredRoutineDatesNames);\n    }, [routineHistory]);\n\n\n    //Load more history items when pressing \"Load more\"\n    const loadMoreHistory = () => {\n        setNumberOfHistoryRows(previous => previous + 10);\n    }\n\n\n    //filter history exercises by date\n    const displayRoutineExercises = (workoutDate) => {\n        return routineHistory.filter(exercise => exercise.date === workoutDate);\n    }\n\n\n    return (\n        <section className={styles.routineHistory}>\n\n            {routineHistory.length === 0 ? <p>\"No history available.\"</p> : null}\n            {\n                datesNamesHistory.map(dateName => (\n                    /* Take the RoutineHistory from local state and map it for display*/\n                    <div key={datesNamesHistory.indexOf(dateName)} className={styles.historyContainer}>\n                        <h3 className={styles.historyDate}>{dateConverter(dateName.date)}</h3>\n                        <h2 className={styles.historyName}>{dateName.name}</h2>\n                        {\n                            //Filter exercises by date and display\n                            displayRoutineExercises(dateName.date).map(historyItem => (\n                                <div className={styles.historyItem} key={historyItem.date + historyItem.exercise}>\n                                    <p className={styles.exercise}>{historyItem.exercise}</p>\n                                    <p className={styles.timeAndNegative}>Time under load: <span>\n                                        {historyItem.time_under_load}s</span>\n                                    </p>\n                                    <p className={styles.timeAndNegative}>Negatives: <span>\n                                        {/* add space when negatives < 10 for display purposes */}\n                                        {historyItem.negatives < 10 ? <span className={styles.spanPadding}></span> : null}\n                                        {historyItem.negatives}</span>\n                                    </p>\n                                </div>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n            {datesNamesHistory.length > 10 ? <button onClick={loadMoreHistory}>Load more history</button> : null}\n        </section >\n    );\n}","import { createSlice } from '@reduxjs/toolkit';\n\nexport const workoutSlice = createSlice({\n    name: \"workout\",\n    initialState: {\n        workoutExercises: [],\n        totalTime: 0,\n        totalTimerActive: false,\n        showEditWorkout: false\n    },\n    reducers: {\n        getWorkoutExercises: (state, action) => {\n            state.workoutExercises = action.payload;\n        },\n        changeTUL: (state, action) => {\n            const timeUnderLoad = action.payload.timeUnderLoad;\n            const exerciseName = action.payload.name;\n\n            const indexOfExercise = state.workoutExercises.findIndex(exercise => exercise.name === exerciseName);\n            state.workoutExercises[indexOfExercise].timeUnderLoad = timeUnderLoad;\n        },\n        addNegatives: (state, action) => {\n            const negatives = parseInt(action.payload.negatives);\n            const exerciseName = action.payload.name;\n\n            const indexOfExercise = state.workoutExercises.findIndex(exercise => exercise.name === exerciseName);\n            state.workoutExercises[indexOfExercise].negatives += negatives;\n        },\n        changeNegatives: (state, action) => {\n            const negatives = parseInt(action.payload.negatives);\n            const exerciseName = action.payload.name;\n            \n            const indexOfExercise = state.workoutExercises.findIndex(exercise => exercise.name === exerciseName);\n            state.workoutExercises[indexOfExercise].negatives = negatives;\n        },\n        startTotalTime: (state) => {\n            state.totalTimerActive = true;\n        },\n        stopTotalTime: (state) => {\n            state.totalTimerActive = false;\n        },\n        resetTotalTime: (state) => {\n            state.totalTime = 0;\n        },\n        updateTotalTime: (state) => {\n            state.totalTime += 1;\n        },\n        toggleShowEditWorkout: (state) => {\n            state.showEditWorkout = !state.showEditWorkout;\n          }\n    }\n});\n\nexport const { getWorkoutExercises, changeTUL, changeNegatives, addNegatives,\n    startTotalTime, stopTotalTime, updateTotalTime, resetTotalTime, toggleShowEditWorkout } = workoutSlice.actions;\nexport default workoutSlice.reducer;","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Workout.module.css';\n\nimport { changeTUL, addNegatives, startTotalTime, updateTotalTime } from './WorkoutSlice';\nimport { changeActiveRoutine } from '../Routines/RoutinesSlice';\n\n\nexport const Workout = () => {\n    const routinesList = useSelector(state => state.routines.routinesList);\n    const workoutExercises = useSelector(state => state.workout.workoutExercises);\n    const dispatch = useDispatch();\n\n    const totalWorkTime = useSelector(state => state.workout.totalTime);\n    const totalTimerActive = useSelector(state => state.workout.totalTimerActive);\n\n\n    //selected exercise\n    const [exerciseIndex, setExerciseIndex] = useState(0);\n    const [selectedExercise, setSelectedExercise] = useState({ name: \"No exercise available yet.\" });\n    const [negatives, setNegatives] = useState(null);\n\n\n    //state for timers\n    const [timeUnderLoad, setTimeUnderLoad] = useState(0);\n    const [timerActive, setTimerActive] = useState(false);\n    //const [totalWorkTime, setTotalWorkTime] = useState(0);\n    //const [totalTimerActive, setTotalTimerActive] = useState(0);\n\n\n    useEffect(() => {\n        if (workoutExercises.length > 0) {\n            setSelectedExercise(workoutExercises[exerciseIndex]);\n        }\n    }, [workoutExercises, exerciseIndex]);\n\n\n    //initiate or clear the timer based on active status\n    useEffect(() => {\n        let timer;\n\n        if (timerActive) {\n            timer = setInterval(() => {\n                setTimeUnderLoad(value => value + 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(timer);\n    }, [timerActive]);\n\n\n    //initiate or clear the total timer based on active status\n    useEffect(() => {\n        let totalTimer;\n\n        if (totalTimerActive) {\n            totalTimer = setInterval(() => {\n                dispatch(updateTotalTime());\n            }, 1000);\n        }\n\n        return () => clearInterval(totalTimer);\n    }, [dispatch, totalTimerActive]);\n\n\n    /* start timer if not active;\n       update time under load for current exercise if active */\n    const stopStartTimer = () => {\n        //if total workout timer not active yet, start it for the workout\n        if (!totalTimerActive) {\n            dispatch(startTotalTime());\n        }\n\n        //if exercise timer inactive, start it. If active, record the value and reset exercise timer\n        if (!timerActive) {\n            setTimerActive(true);\n        } else {\n            setTimerActive(false);\n\n            const values = {\n                name: selectedExercise.name,\n                timeUnderLoad: timeUnderLoad\n            }\n            dispatch(changeTUL(values));\n\n            setTimeUnderLoad(0);\n        }\n    }\n\n\n    //reset the time under load to 0 and stop the timer\n    const resetTimer = () => {\n        setTimerActive(false);\n        setTimeUnderLoad(0);\n    }\n\n\n    //update negatives when editing input\n    const handleNegativesChange = (event) => {\n        setNegatives(parseInt(event.target.value));\n    }\n\n\n    //add negatives to the selected exercise\n    const addMoreNegatives = () => {\n        const values = {\n            name: selectedExercise.name,\n            negatives: negatives\n        }\n        dispatch(addNegatives(values));\n    }\n\n\n    //increment selected exercise index\n    const indexIncrease = () => {\n        if (exerciseIndex < workoutExercises.length - 1) {\n            setExerciseIndex(index => index + 1);\n        } else {\n            setExerciseIndex(0);\n        }\n\n        setSelectedExercise(workoutExercises[exerciseIndex]);\n    }\n\n\n    //decrement selected exercise index\n    const indexDecrease = () => {\n        if (exerciseIndex === 0) {\n            setExerciseIndex(workoutExercises.length - 1);\n        } else {\n            setExerciseIndex(index => index - 1);\n        }\n\n        setSelectedExercise(workoutExercises[exerciseIndex]);\n    }\n\n\n    //change active routine when selecting a different routine\n    const handleRoutineChange = (newRoutine) => {\n        setExerciseIndex(0);\n        dispatch(changeActiveRoutine(newRoutine));\n    }\n\n\n    return (\n        <section className={styles.workoutHistory}>\n            <div className={styles.timerContainer}>\n                <time className={styles.timeUnderLoad}>{timeUnderLoad}<span>s</span></time>\n                <p>Total workout time:</p>\n                <time>{totalWorkTime}</time>\n            </div>\n\n            {/* Display the activateRoutine from global state into the section heading */}\n            <h2>\n                {routinesList.length === 0 ? 'No workouts available yet.' : null}\n                <select className={styles.workoutTitle}>\n                    {routinesList.map(routine => (\n                        <option \n                        key={routine.id} \n                        value={routine.name} \n                        data-testid=\"routineTitle\"\n                        onClick={() => handleRoutineChange(routine)}>{routine.name}</option>\n                    ))}\n                </select>\n            </h2>\n            <p className={styles.description}>\n                {\n                    routinesList.length === 0 ? 'Create a routine to start working out' :\n                        'Select a different routine above to change the workout'\n                }\n            </p>\n\n\n            {/* Display buttons for active exercise and timer controls if routines exist. */}\n            {\n                routinesList.length === 0 ? null : <div className={styles.buttonsContainer}>\n                    <div id={styles.exerciseSelector}>\n                        <button onClick={indexDecrease}>{\"<\"}</button>\n                        <h2>{selectedExercise.name}</h2>\n                        <button onClick={indexIncrease}>{\">\"}</button>\n                    </div>\n\n                    <div>\n                        <button id={timerActive ? styles.startSetLight : styles.startSetDark} onClick={stopStartTimer}>{timerActive === false ? \"Start set\" : \"Record set\"}</button>\n                        <button onClick={resetTimer}>Reset set</button>\n                    </div>\n\n                    <div className={styles.negatives}>\n                        <button onClick={addMoreNegatives}>Add negatives</button>\n                        <input type=\"text\" onChange={handleNegativesChange} data-testid=\"negativesInput\"/>\n                    </div>\n                </div>\n            }\n        </section>\n    );\n}","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './Edit.module.css';\n\nimport { toggleShowEditWorkout, changeTUL, changeNegatives } from '../Workout/WorkoutSlice';\n\nexport const Edit = props => {\n    const showModal = useSelector(state => state.workout.showEditWorkout);\n    const exercise = props.exerciseToEdit;\n    const dispatch = useDispatch();\n\n    const [timeUnderLoad, setTimeUnderLoad] = useState(0);\n    const [negatives, setNegatives] = useState(0);\n\n\n    //only show this component when the edit button was pressed\n    if (!showModal) {\n        return null;\n    }\n\n\n    //update time under load or negatives in local state, on change\n    const handleTULChange = (event) => setTimeUnderLoad(event.target.value);\n    const handleNegativesChange = (event) => setNegatives(event.target.value);\n\n\n    //send values to global state on \"Done\" click\n    const handleDoneClick = () => {\n        dispatch(changeTUL({\n            name: exercise.name,\n            timeUnderLoad: timeUnderLoad\n        }));\n\n        dispatch(changeNegatives({\n            name: exercise.name,\n            negatives: negatives\n        }));\n\n        dispatch(toggleShowEditWorkout());\n    };\n\n\n    return (\n        <div className={styles.modal}>\n            <div className={styles.elementsBackground}>\n                <h2>{props.exerciseToEdit.name}:</h2> <br />\n                <label htmlFor=\"timeUnderLoad\">Time under load in seconds:</label>\n                <input type=\"text\" id=\"timeUnderLoad\" placeholder={exercise.timeUnderLoad}\n                    onChange={handleTULChange} />\n\n                <label htmlFor=\"negatives\">Negatives:</label>\n                <input type=\"text\" id=\"negatives\" placeholder={exercise.negatives}\n                    onChange={handleNegativesChange} />\n\n                <div className={styles.buttonsContainer}>\n                    <button className={styles.editButton} onClick={handleDoneClick}>Done</button>\n                    <button className={styles.cancelbutton} onClick={() => dispatch(toggleShowEditWorkout())}>Cancel</button>\n                </div>\n            </div>\n        </div>\n    );\n}","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './WorkoutHistory.module.css';\n\nimport { getWorkoutExercises, stopTotalTime, resetTotalTime, toggleShowEditWorkout } from '../Workout/WorkoutSlice';\nimport { Edit } from './Edit';\n\nexport const WorkoutHistory = () => {\n    const activeRoutine = useSelector(state => state.routines.activeRoutine);\n    const workoutExercises = useSelector(state => state.workout.workoutExercises);\n    const totalWorkTime = useSelector(state => state.workout.totalTime);\n\n    const [exerciseToEdit, setExerciseToEdit] = useState(null);\n    const [messageAlert, setMessageAlert] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const baseUrl = \"api/workout/\";\n\n\n    //get the exercises for currently selected Routine\n    useEffect(() => {\n        const fetchWorkoutExercises = async () => {\n            const fetchUrl = baseUrl + activeRoutine.id;\n\n            const workoutExercisesResults = await fetch(fetchUrl);\n            const jsonworkoutExercisesResults = await workoutExercisesResults.json();\n\n            const exercisesWithStats = jsonworkoutExercisesResults.map(exercise => ({\n                name: exercise.name,\n                id: exercise.exercises_routines_id,\n                timeUnderLoad: 0,\n                negatives: 0\n            }));\n\n            dispatch(getWorkoutExercises(exercisesWithStats));\n        };\n\n        fetchWorkoutExercises();\n    }, [activeRoutine, dispatch]);\n\n\n    //record the workout in the database\n    const recordWorkout = () => {\n        dispatch(stopTotalTime(0));\n\n        const workoutDetails = {\n            totalWorkoutTime: totalWorkTime,\n            exercises: workoutExercises,\n        }\n\n        const fetchOptions = {\n            method: 'POST',\n            body: JSON.stringify(workoutDetails),\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        fetch(baseUrl, fetchOptions).then(res => {\n            if (res.status === 201) {\n                setMessageAlert('Workout recorded!');\n            } else {\n                setMessageAlert('Workout was not recorded. Try again!');\n            }\n        });\n\n        dispatch(resetTotalTime(0));\n    };\n\n\n    //open edit modal\n    const handleEditClick = (exercise) => {\n        setExerciseToEdit(exercise);\n        dispatch(toggleShowEditWorkout());\n    }\n\n\n    return (\n        <section className={styles.workoutHistory}>\n\n            {\n                /* If no exercises in the routine, display a warning */\n                workoutExercises.length === 0 ? 'No exercises available yet.' : null\n            }\n            {\n                workoutExercises.map(exercise => (\n                    <div key={exercise.id + \"\" + Math.random()}>\n                        <h3>{exercise.name}</h3>\n                        <div className={styles.exerciseStatsContainer}>\n                            <div>\n                                <p>Time under load: <span>{exercise.timeUnderLoad}</span></p>\n                                <p>Negatives: <span>{exercise.negatives}</span></p>\n                            </div>\n                            <button onClick={() => handleEditClick(exercise)}>Edit</button>\n                        </div>\n                    </div>\n                ))\n            }\n\n            <button id={styles.completeButton} onClick={recordWorkout}>Record workout</button>\n            <p className={styles.alert} data-testid=\"workoutAlert\">{messageAlert}</p>\n            {/* Edit component as modal, with the ID of the Routine\n                that needs to be edited/deleted in the database */}\n            <Edit exerciseToEdit={exerciseToEdit} />\n        </section >\n    );\n}","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './Login.module.css';\nimport { Link, Redirect, useHistory } from 'react-router-dom';\n\nimport { logIn } from './LoginSlice';\n\n\nexport const Login = () => {\n    const loggedIn = useSelector(state => state.login.loggedIn);\n\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    if (loggedIn) {\n        return <Redirect to=\"/workout\" />;\n    }\n\n\n    //login and if successful, redirect to workout page\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        fetch('api/account/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        }).then(res => {\n            if (res.status === 200) {\n                dispatch(logIn());\n                history.push('/workout');\n            }\n        });\n    }\n\n\n    return (\n        <section className={styles.loginContainer}>\n            <form onSubmit={handleSubmit} action=\"\">\n                <label htmlFor=\"username\">Username:</label>\n                <input type=\"email\" name=\"username\" id=\"username\" required\n                    onChange={e => setUsername(e.target.value)} />\n                <label htmlFor=\"password\">Password:</label>\n                <input type=\"password\" name=\"password\" id=\"password\" required\n                    onChange={e => setPassword(e.target.value)} />\n                <input type=\"submit\" className={styles.submitButton} value=\"Log In\" />\n            </form>\n            <p>Don't have an account? <Link to=\"/register\">Register here.</Link></p>\n        </section >\n    );\n}","import styles from './Register.module.css';\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\n\n\nexport const Register = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n\n    const [alert, setAlert] = useState(\"\");\n\n\n    //login and if successful, redirect to workout page\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (password === passwordConfirm) {\n            fetch('api/account/register', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password\n                })\n            }).then(res => {\n                if(res.status === 403) {\n                    setAlert(\"Email already exists. Please log in.\");\n                } else if(res.status === 201) {\n                    setAlert(\"User created, you can log in now.\");\n                }\n            });\n            \n        } else {\n            setAlert(\"Password fields don't match. Try again.\");\n        }\n    }\n\n    return (\n        <section className={styles.registerContainer} onSubmit={handleSubmit} action=\"\">\n            <form>\n                <label htmlFor=\"username\">Username:</label>\n                <input id=\"username\" type=\"email\" required\n                    onChange={e => setUsername(e.target.value)} />\n                <label htmlFor=\"password\">Password:</label>\n                <input id=\"password\" type=\"password\" required\n                    onChange={e => setPassword(e.target.value)} />\n                <label htmlFor=\"passwordConfirm\">Confirm Password:</label>\n                <input id=\"passwordConfirm\" type=\"password\" required\n                    onChange={e => setPasswordConfirm(e.target.value)} />\n                <input type=\"submit\" className={styles.submitButton} value=\"Register\" />\n                <p className={styles.alert}>{alert}</p>\n            </form>\n            <p>Already have an account? <Link to=\"/login\">Log in here.</Link></p>\n        </section >\n    );\n}","import { useState } from 'react';\nimport styles from './Account.module.css';\n\n\nexport const Account = () => {\n    const [newEmail, setNewEmail] = useState(\"\");\n    const [emailConfirm, setEmailConfirm] = useState(\"\");\n\n    const [oldPassword, setOldPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n\n    //change email\n    const handleEmailSubmit = (event) => {\n        event.preventDefault();\n\n        if (newEmail === emailConfirm) {\n            fetch('api/account/email', {\n                method: 'PUT',\n                headers: {\n                    'content-type': 'application/json',\n                },\n                body: JSON.stringify({\n                    password: oldPassword,\n                    newEmail: newEmail\n                })\n            }).then(res => {\n                if (res.status === 200) {\n                    setAlertMessage('Email changed.');\n                }\n                else if (res.status === 403) {\n                    setAlertMessage('Unable to change email. Please try again!');\n                }\n            });\n        } else {\n            setAlertMessage(\"Emails don't match. Try again!\");\n        }\n    }\n\n\n    //change password\n    const handlePasswordSubmit = (event) => {\n        event.preventDefault();\n\n        if (newPassword === passwordConfirm) {\n            fetch('api/account/password', {\n                method: 'PUT',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                body: JSON.stringify({\n                    oldPassword: oldPassword,\n                    newPassword: newPassword\n                })\n            }).then(res => {\n                if (res.status === 200) {\n                    setAlertMessage('Password changed.');\n                }\n                else if (res.status === 403) {\n                    setAlertMessage('Unable to change password. Please try again!');\n                }\n            });\n        } else {\n            setAlertMessage(\"Passwords don't match. Try again!\");\n        }\n    }\n\n\n    return (\n        <section className={styles.accountContainer}>\n            <h2>Change email or password</h2>\n            <div className={styles.formsContainer}>\n                <form onSubmit={handleEmailSubmit} action=\"\">\n                    <label htmlFor=\"passwordConfirmEmail\">Enter your password:</label>\n                    <input id=\"passwordConfirmEmail\" type=\"password\" required\n                        onChange={e => setOldPassword(e.target.value)} />\n                    <label htmlFor=\"newEmail\">New email address:</label>\n                    <input id=\"newEmail\" type=\"email\" required\n                        onChange={e => setNewEmail(e.target.value)} />\n                    <label htmlFor=\"emailConfirm\">Confirm new email address:</label>\n                    <input id=\"emailConfirm\" type=\"email\" required\n                        onChange={e => setEmailConfirm(e.target.value)} />\n                    <button type=\"submit\">Change email address</button>\n                </form>\n\n                <form onSubmit={handlePasswordSubmit} action=\"\">\n                    <label htmlFor=\"oldPassword\">Enter old password:</label>\n                    <input id=\"oldPassword\" type=\"password\" required\n                        onChange={e => setOldPassword(e.target.value)} />\n                    <label htmlFor=\"newPassword\">New password:</label>\n                    <input id=\"newPassword\" type=\"password\" required\n                        onChange={e => setNewPassword(e.target.value)} />\n                    <label htmlFor=\"passwordConfirm\">Confirm new password:</label>\n                    <input id=\"passwordConfirm\" type=\"password\" required\n                        onChange={e => setPasswordConfirm(e.target.value)} />\n                    <button type=\"submit\">Change password</button>\n                </form>\n            </div>\n            <p className={styles.alert}>{alertMessage}</p>\n        </section >\n    );\n}","import { Link } from 'react-router-dom';\nimport styles from './HowToUse.module.css';\n\n\n\nexport const HowToUse = () => {\n\n    return (\n        <section className={styles.howToUseContainer}>\n            <h2>Overview</h2>\n            <p>This app is designed for High Intensity Training(HIT) with bodyweight exercises.\n             This consists of only one set per exercise, to complete mechanical failure.</p>\n            <p>There is also the chance to add extra negative reps at the end of the initial set for further stimulus,\n             since bodyweight exercises often have \"sticking points\" that stop the set before complete muscle fatigue.</p>\n            <p>The time under load for each exercise set should be between 45s and 90s.\n             If you can handle more than 90s, it's time to increase the difficulty of the exercise.</p>\n            <p>This training method requires a good amount of rest days to recover from\n            the very high intensity, so for the average person, one full body workout\n            per week is the ideal frequency and volume with this approach.</p>\n            <br />\n\n            <h3><span>Step 1{')'}</span> Add exercises</h3>\n            <p>First, go to the <Link to=\"/exercises\">exercises</Link> page\n             and add your favourite exercises.</p>\n\n            <h3><span>Step 2{')'}</span> Create a routine</h3>\n            <p>Go to the <Link to=\"/routines\">routines</Link> page, create a routine and add\n             exercises to it from your exercises list.</p>\n\n            <h3><span>Step 3{')'}</span> Work out!</h3>\n            <p>Finally, go to the <Link to=\"/workout\">workout</Link> page and start your workout\n             with one of your routines. You can record your time under load and the number\n             of extra negative reps for each exercise. </p>\n            <p>When you're done with all exercises, press \"Record workout\" to save your workout.</p>\n        </section >\n    );\n}","export default __webpack_public_path__ + \"static/media/workingOut.a2cfd67a.jpg\";","import { Link } from 'react-router-dom';\n\nimport styles from './LandingPage.module.css';\nimport background from '../../_images/workingOut.jpg';\n\n\nexport const LandingPage = () => {\n\n    return (\n        <div className={styles.landingPageContainer}>\n            <section id={styles.mainImage}>\n                <img src={background} alt='Man doing pullups'/>\n            </section>\n            <section className={styles.textContainer}>\n                <h2>Maximum intensity. <br /><span>Minimum time.</span></h2>\n               <p><em>Complete fitness in just 15 minutes a week.</em></p>\n               <button><Link to=\"/login\">Login</Link></button>\n               <button><Link to=\"/register\">Register</Link></button>\n            </section >\n        </div>\n    );\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { useEffect, Fragment } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n//import components\r\nimport { Header } from './features/Header/Header';\r\nimport { Exercises } from './features/Exercises/Exercises';\r\nimport { ExerciseHistory } from './features/ExerciseHistory/ExerciseHistory';\r\nimport { Routines } from './features/Routines/Routines';\r\nimport { RoutineHistory } from './features/RoutinesHistory/RoutineHistory';\r\nimport { History } from './features/History/History';\r\nimport { Workout } from './features/Workout/Workout';\r\nimport { WorkoutHistory } from './features/WorkoutHistory/WorkoutHistory';\r\nimport { Login } from './features/Login/Login';\r\nimport { Register } from './features/Login/Register';\r\nimport { Account } from './features/Account/Account';\r\nimport { HowToUse } from './features/HowToUse/HowToUse';\r\nimport { LandingPage } from './features/LandingPage/LandingPage';\r\n\r\n\r\n//import action creators\r\nimport { getRoutinesList, getRoutinesExercisesList, changeActiveRoutine } from './features/Routines/RoutinesSlice';\r\nimport { getExercisesList, changeActiveExercise } from './features/Exercises/ExercisesSlice';\r\nimport { logIn } from './features/Login/LoginSlice';\r\n\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const loggedIn = useSelector(state => state.login.loggedIn);\r\n\r\n  useEffect(() => {\r\n    //if user is logged in on the server, set the state as logged in\r\n    fetch('api/account/checkLoginStatus').then(res => {\r\n        if (res.status === 200 || res.status === 304) {\r\n            dispatch(logIn());\r\n        }\r\n    });\r\n}, [dispatch]);\r\n\r\n\r\n  //get Routines and set first index as active routine when component mounts\r\n  useEffect(() => {\r\n    const getRoutines = async () => {\r\n      const routines = await fetch(\"api/routines\");\r\n      const jsonRoutines = await routines.json();\r\n\r\n      dispatch(getRoutinesList(jsonRoutines));\r\n      dispatch(changeActiveRoutine(jsonRoutines[0]));\r\n    };\r\n\r\n    if (loggedIn) {\r\n      getRoutines();\r\n    }\r\n  }, [dispatch, loggedIn]);\r\n\r\n\r\n  //get the exercises that belong to routines\r\n  useEffect(() => {\r\n    const getExercisesRoutines = async () => {\r\n      const exercisesRoutines = await fetch(\"api/routines/exercises\");\r\n      const jsonExercisesRoutines = await exercisesRoutines.json();\r\n\r\n      dispatch(getRoutinesExercisesList(jsonExercisesRoutines));\r\n    };\r\n\r\n    if (loggedIn) {\r\n      getExercisesRoutines();\r\n    }\r\n  }, [dispatch, loggedIn]);\r\n\r\n\r\n  //get exercises and set first index as active element when component mounts\r\n  useEffect(() => {\r\n    const getExercises = async () => {\r\n      const exercises = await fetch(\"api/exercises\");\r\n      const jsonExercises = await exercises.json();\r\n\r\n      dispatch(getExercisesList(jsonExercises));\r\n      dispatch(changeActiveExercise(jsonExercises[0]));\r\n    };\r\n\r\n    if (loggedIn) {\r\n      getExercises();\r\n    }\r\n  }, [dispatch, loggedIn]);\r\n\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"mainContainer\">\r\n          <main>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <LandingPage />\r\n              </Route>\r\n\r\n              <Route exact path=\"/workout\">\r\n                {!loggedIn ? <Redirect to=\"/login\" /> :\r\n                  <Fragment>\r\n                    <Workout />\r\n                    <WorkoutHistory />\r\n                  </Fragment>\r\n                }\r\n              </Route>\r\n\r\n              <Route exact path=\"/history\">\r\n                {!loggedIn ? <Redirect to=\"/login\" /> : <History />}\r\n              </Route>\r\n\r\n              <Route exact path=\"/exercises\">\r\n                {!loggedIn ? <Redirect to=\"/login\" /> :\r\n                  <Fragment>\r\n                    <Exercises />\r\n                    <ExerciseHistory />\r\n                  </Fragment>\r\n                }\r\n              </Route>\r\n\r\n              <Route exact path=\"/routines\">\r\n                {!loggedIn ? <Redirect to=\"/login\" /> :\r\n                  <Fragment>\r\n                    <Routines />\r\n                    <RoutineHistory />\r\n                  </Fragment>\r\n                }\r\n              </Route>\r\n\r\n              <Route exact path=\"/howtouse\">\r\n                {!loggedIn ? <Redirect to=\"/login\" /> : <HowToUse />}\r\n              </Route>\r\n\r\n              <Route exact path=\"/login\">\r\n                <Login />\r\n              </Route>\r\n\r\n              <Route exact path=\"/register\">\r\n                <Register />\r\n              </Route>\r\n\r\n              <Route exact path=\"/account\">\r\n                {!loggedIn ? <Redirect to=\"/login\" /> : <Account />}\r\n              </Route>\r\n            </Switch>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport exercisesReducer from '../features/Exercises/ExercisesSlice';\r\nimport routinesReducer from '../features/Routines/RoutinesSlice';\r\nimport workoutReducer from '../features/Workout/WorkoutSlice';\r\nimport loginReducer from '../features/Login/LoginSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    exercises: exercisesReducer,\r\n    routines: routinesReducer,\r\n    workout: workoutReducer,\r\n    login: loginReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}